key = "0e0569146c7227ee0081",
secret = "1a3b9bfc2a3e56632ad487ff0b0016c28f422c8a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Learning",
key = "0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
# Libraries
library(xlsx)
library(httr)
library(XML)
library(data.table)
# Working Directory
setwd("/Users/enricoferrari/datascience/3. Getting and Cleaning Data/Week 2")
# Question 1
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Learning",
key = "0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/enricoferrarief/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/tjleeks/repos"))
req
stop_for_status(req)
content(req)
library(jsonlite)
myapp <- oauth_app("Learning",
"0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("Learning")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
"0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
# Libraries
library(xlsx)
library(httr)
library(XML)
library(data.table)
library(jsonlite)
# Working Directory
setwd("/Users/enricoferrari/datascience/3. Getting and Cleaning Data/Week 2")
# Question 1
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
stop_for_status(req)
content(req)
# Libraries
library(xlsx)
library(httr)
library(XML)
library(data.table)
library(jsonlite)
# Working Directory
setwd("/Users/enricoferrari/datascience/3. Getting and Cleaning Data/Week 2")
# Question 1
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
stop_for_status(req)
content(req)
content(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
myapp <- oauth_app("github",
key = "0e0569146c7227ee0081",
secret = "adfa66299ee04664a7c49ddda3a81e69b727b9e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
stop_for_status(req)
output <- content(req)
# Question 1
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e0569146c7227ee0081",
secret = "721fbfd39f975f339271df16a83d7b937cd935e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
# Question 1
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0e0569146c7227ee0081",
secret = "721fbfd39f975f339271df16a83d7b937cd935e4")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleeks/repos", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/tjleek/repos", gtoken)
stop_for_status(req)
content(req)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
data <- content(req)
data <- fromJSON(content(req))
library(jsonlite)
data <- fromJSON(content(req))
data <- fromJSON(req)
req <- fromJSON("https://api.github.com/users/jtleek/repos")
req
data$name
data$names
head(data)
data <- fromJSON("https://api.github.com/users/jtleek/repos")
data$name
answer <- data$created_at[data$name == "datasharing"]
setwd("/Users/enricoferrari/datascience/3. Getting and Cleaning Data/Week 2")
If (!file.exists("Question 2")) {
dir.create("Question 2")
}
# Download File
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./Question 2/data.csv", method = "curl")
list.files("./Question 2/")
library(sqldf)
acs <- read.csv("Question 2/data.csv")
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./Question 2/data.csv", method = "curl")
list.files("./Question 2/")
# Read File in R
acs <- read.csv("Question 2/data.csv")
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
req <- GET(fileUrl)
content <- content(req)
content
content[1:2,]
typeof(content)
content[10]
req
req[1]
req[10]
nchar(req[10])
req[10]
req[10][1]
req$content
req$content[10]
req$url[10]
req$handle[10]
req
con=url(fileUrl)
con=url(fileUrl)
htmlCode = readLines(con)
close(con)
htmlCode
lines <- c(10,20,30,100)
nchar(htmlCode[lines,])
htmlCode[lines]
nchar(htmlCode[lines])
# Create Data Directory
If (!file.exists("Question 5")) {
dir.create("Question 5")
}
# Read File in R
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile="./Question 5/data.for", method = "curl")
list.files("./Question 5/")
library(read.fwf)
install.packages("read.fwf")
install.packages("
read.fortran")
library(read.fwf)
data <- read.fwf("/Question 5/data.for")
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data <- read.fwf("/Question 5/data.for",skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data <- read.fwf("data.for",skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data <- read.fwf("./Question 5/data.for",skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
data
answer <- sum(data$V4) + sum(data$V9)
head(data)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
setwd("~/datascience/3. Getting and Cleaning Data/Week 3")
# Create Data Directory
If (!file.exists("Question 1")) {
dir.create("Question 1")
}
# Download File
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./Question 1/data.csv", method = "curl")
list.files("./Question 1/")
# Read File in R
data <- read.csv("Question 2/data.csv")
data <- read.csv("Question 1/data.csv")
agricultureLogical <- data$ACR > 3 & data$AGS == 6
agricultureLogical <- data$ACR == 3 & data$AGS == 6
head(which(agricultureLogical), n=3)
library(jpeg)
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
image = jpeg(fileUrl, native = TRUE)
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
# Question 2
# Create Data Directory
If (!file.exists("Question 2")) {
dir.create("Question 2")
}
# Download File
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile="./Question 2/image.jpg", method = "curl")
list.files("./Question 2/")
image = jpeg("./Question 2/image.jpg", native = TRUE)
image = jpeg("./Question 2/image.jpg")
summary(image)
quantile(image,80)
quantile(image,0.8)
library(jpeg)
read.jpeg(image, native = TRUE)
library(read.jpeg)
install.packages("read.jpeg")
image
image = readJPEG("./Question 2/image.jpg",native = TRUE)
answer <- c(quantile(image,0.3),quantile(image,0.8))
# Download File
fileUrlA <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrlA, destfile="./Question 3/dataA.csv", method = "curl")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
list.files("./Question 3/")
# Read File in R
dataA <- read.csv("Question 3/dataA.csv")
dataB <- read.csv("Question 3/dataB.csv")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
fileUrlA <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrlA, destfile="./Question 3/dataA.csv", method = "curl")
fileUrlA <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrlA, destfile="./Question 3/dataA.csv", method = "curl")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
list.files("./Question 3/")
# Read File in R
dataA <- read.csv("Question 3/dataA.csv")
dataB <- read.csv("Question 3/dataB.csv")
# Create Data Directory
If (!file.exists("Question 3")) {
dir.create("Question 3")
}
# Download File
fileUrlA <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrlA, destfile="./Question 3/dataA.csv", method = "curl")
fileUrlB <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrlB, destfile="./Question 3/dataB.csv", method = "curl")
list.files("./Question 3/")
# Read File in R
dataA <- read.csv("Question 3/dataA.csv")
dataB <- read.csv("Question 3/dataB.csv")
head(dataA)
data$SMX
head(dataA)
dataA$X
head(dataB)
?arrange
answer <- arrange(merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = TRUE) CountryCode)
answer <- arrange(merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = TRUE), CountryCode)
library(dplyr)
library(dplyr)
answer <- arrange(merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = TRUE), CountryCode)
answer <- arrange(merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = TRUE), "CountryCode")
answer <- merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = TRUE)
head(answer)
head(dataA)
head(dataB)
answer <- merge(dataA,dataB, by.x = "X",by.y = "CountryCode", all = FALSE)
answer
head(answer)
answer <- unique(merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE))
?merge
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
flags
head(answer)
arrange(answer,desc(X.1))
head(answer)
arrange(answer,desc(numeric(X.1)))
arrange(answer,desc(numeric(X.1,length(1L))))
?numeric
arrange(answer,desc(as.numeric(X.1)))
answer$X.1
head(answer)
arrange(answer,as.numeric(Gross.domestic.product.2012))
head(dataA)
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
head(dataA)
unique(dataA)
dataA <- dataA[which(dataA)]
dataA <- dataA[!is.na(dataA)]
dataA
dataA <- dataA[is.na(dataA) == FALSE]
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
dataA <- dataA[!is.na(dataA$Ranking)]
dataA$Ranking
is.na(dataA$Ranking)
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
dataA$Ranking
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
dataA <- dataA[dataA$Ranking != ""]
dataA$Ranking != ""
dataA <- dataA[dataA$Ranking != ""]
dataA <- dataA[dataA$Ranking != "",]
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
arrange(answer,desc(as.numeric(Ranking)))
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = TRUE)
arrange(answer,desc(as.numeric(Ranking)))
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
head(answer)
arrange(answer,desc(as.numeric(Ranking)))
answer <- arrange(answer,desc(as.numeric(Ranking)))
head(answer)
answer
head(answer, n= 100)
head(answer, n = 15)
answer <- arrange(answer,desc(as.numeric(Ranking)))
answer$Ranking
answer <- arrange(answer,as.numeric(desc(Ranking)))
answer
answer <- arrange(answer,desc(Ranking))
answer
typeof(answer$Ranking)
answer <- arrange(answer,desc(Ranking))
max(answer$Ranking)
answer <- arrange(answer,desc(as.numeric(levels(Ranking))))
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))
answer
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,]
answer
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,Economy]
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,"Economy"]
answer
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,]
answer
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
dataA <- dataA[dataA$Ranking != "",]
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,]
answer$Economy
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))[13,]$Economy
answer
# Read File in R
dataA <- read.csv("Question 3/dataA.csv",skip = 3)
dataB <- read.csv("Question 3/dataB.csv")
# Filter of dataA dataset where ranking is existent
dataA <- dataA[dataA$Ranking != "",]
# Data Merge
answer <- merge(dataA, dataB, by.x = "X", by.y = "CountryCode", all = FALSE)
answer <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))
library(reshape2)
head(answer)
?dcast
dcast(answer, Income.Group ~ variable)
dcast(answer, Income.Group ~ Ranking, mean)
dcast(answer, Ranking ~ Income.Group, mean)
dcast(answer, Ranking ~ Income.Group)
dcast(answer, as.numeric(levels(Ranking)[Ranking] ~ Income.Group, mean)
dcast(answer, Income.Group ~ as.numeric(levels(Ranking)[Ranking], mean)
dcast(answer, Income.Group ~ as.numeric(levels(Ranking))[Ranking], mean)
tapply(as.numeric(levels(answer$Ranking)[answer$Ranking]),answer$Income.Group,mean)
answer3 <- arrange(answer,desc(as.numeric(levels(Ranking)[Ranking])))
answer4 <- tapply(as.numeric(levels(answer3$Ranking)[answer3$Ranking]),answer3$Income.Group,mean)
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
data <- cut(answer3$Ranking, 5)
data <- cut(levels(answer3$Ranking)[answer3$Ranking], 5)
data <- cut(as.numeric(levels(answer3$Ranking)[answer3$Ranking]), 5)
data
rankingGroups <- cut(as.numeric(levels(answer3$Ranking)[answer3$Ranking]), 5)
table(rankingGroups,answer3$Income.Group)
